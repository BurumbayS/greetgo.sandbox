1. Клиентская часть и стэнд

(+) 1.01. Работа с клиентами нужно вынести в отдельную папку.

(+) 1.02. Список клиентов и форма редактирования должны быть в разных компонентах и в разных файлах.

(+) 1.03. Классы для элемента списка, для загрузки формы редактирования и для сохранения клиента должны быть разными; и иметь корректные названия.

(+) 1.04. Форма редактирования должна открываться сразу, а не при получени данных с сервера: это проверяется путём замедления сервисов со стэнда.

(+) 1.05. Модели на стороне Java должны автоматически генерироваться из моделей на TypeScript.

(+) 1.06. После сохранения список обновляться не должен, но изменённый клиент в списке должен корректно оттобразиться после сохранения.

(+) 1.07. Из списка на форму редактирования должен передоваться только ИД клиента.

(+) 1.07. Из списка на форму редактирования должен передоваться только ИД клиента.

(+) 1.07.1. ... а если осуществляется добавление клиента, то передаём null.

(+) 1.08. На стэнде логика сервера должна быть реализована похожим образом на реальный сервер. Должен быть использован соответствующий Dot-класс.

1.09. Генерация отчётов должна быть разбита на две части: рендер и источник данных, связанных своей моделью.

1.10. При загрузке отчёта, должны быть два запроса на сервер: на первом сохраняем параметры, на втором загружаем непосредственно отчёт.

1.11. Рендер должен быть реализован уже на этапе реализации стэнда и распологаться в модуле controller.

1.12. Рендера должно быть два: один для PDF, другой для XLSX.

1.12.1. Рендера должны быть протестированы через функцию main.

1.12.2. Рендера должны генерировать выходной файл так, чтобы его случайно не закомитили в репозиторий.

(+) 1.13. Работа со справочником характера должна быть корретной с точки зрения идентификаторов.

(+) 1.14. Как будет себя вести система, если пришедшего charm_id нет в списке? Она должна вести себя корректно.
